(defconst eval-py (. python eval))
(defconst map (. python map))
(defconst zip (. python zip))
(defconst next (. python next))
(defconst iter (. python iter))
(defconst len (. python len))
(defconst str (. python str))
(defconst stdin (. python sys stdin))
(defconst stdout (. python sys stdout))
(defconst stderr (. python sys stderr))
(defconst type-list (. python list))
(defconst type-tuple (. python tuple))
(defconst type-set (. python set))
(defconst type-dict (. python dict))
(defconst type-symbol (. adder common Symbol))
(defconst type-int (. python int))
(defconst type-str (. python str))
(defconst type-generator (. python types GeneratorType))
(defconst gensym (. adder common gensym))
(defconst intern (. adder common Symbol))

(defmacro dp (expr)
  (defvar scratch (gensym))
  `(scope
    (defvar ,scratch ,expr)
    (print (quote ,expr) ":" ((. adder common adderStr) ,scratch))
    ,scratch))

(defun head (l)
  ([] l 0)
  )

(defun tail (l)
  (slice l 1)
  )

(defun reverse! (l)
  ((. l reverse))
  l)

(defun cons (h t)
  (+ (mk-list h) t))

(defmacro cond (&rest cases)
  (defun mk (cs)
    (if (not cs)
        none
        `(if ,(head (head cs))
             (begin
               ,@(tail (head cs)))
             ,(mk (tail cs)))
        )
    )
  (mk cases)
  )

(defmacro .. (&rest parts)
  `(lambda (obj)
     (. obj ,@parts)))

(defun list? (x) (isinstance x type-list))
(defun tuple? (x) (isinstance x type-tuple))
(defun set? (x) (isinstance x type-set))
(defun dict? (x) (isinstance x type-dict))
(defun symbol? (x) (isinstance x type-symbol))
(defun keyword? (x) (and (symbol? x) (== ([] (str x) 0) ":")))
(defun int? (x) (isinstance x type-int))
(defun str? (x) (isinstance x type-str))
(defun generator? (x) (isinstance x type-generator))

(defun mapcar (f l)
  (list (map f l)))

(defmacro let* (decls &rest body)
  `(scope
    ,@(map (lambda (def)
             (if (list? def)
                 `(defvar ,([] def 0)
                    ,([] def 1))
                 `(defvar ,def)
                 )
             )
           decls)
    ,@body
    )
  )

(defmacro let (decls &rest body)
  (defvar vars (list (map (lambda (def)
                            (if (list? def)
                                (head def)
                                def))
                          decls)))
  (defvar exprs (list (map (lambda (def)
                             (if (list? def)
                                 ([] def 1)
                                 none))
                           decls)))
  (defvar scratches (list (map gensym vars)))

  (defvar decl-scratches (list (map list (zip scratches exprs))))
  (defvar decl-vars (list (map list (zip vars scratches))))

  `(let* (,@decl-scratches
          ,@decl-vars)
     ,@body))

(defmacro with-macro-vars (vars &rest body)
  `(let ,(list (map (lambda (v) `(,v (quote ,(gensym v)))) vars))
     ,@body))

(defmacro define (name-and-maybe-args &rest body-or-value)
  (if (list? name-and-maybe-args)
      (let ((name (head name-and-maybe-args))
            (args (tail name-and-maybe-args)))
        `(defun ,name ,args ,@body-or-value))
      `(defvar ,name-and-maybe-args ,(head body-or-value))))

(defun error (msg)
  (raise ((. python Exception) msg)))

(defmacro case (key &rest cases)
  (with-macro-vars (value)
    `(scope
      (define ,value ,key)
      (cond ,@(map (lambda (values-and-body)
                     (define values (head values-and-body))
                     (define body (tail values-and-body))
                     `(,(cond
                         ((list? values)
                          `(in ,value (quote ,values)))
                         ((== values (quote otherwise)) true)
                         (true `(== ,value ,values)))
                       ,@body))
                   cases)
            )
      )
    )
  )

(defmacro ecase (key &rest cases)
  `(case ,key
     ,@cases
     (otherwise (error "Fell through ecase"))))

(define (take i n)
  (:= i (iter i))
  (while (> n 0)
         (yield (next i))
         (:= n (- n 1))))

(defmacro when (cond &rest body)
  `(if ,cond
       (begin ,@body)))

(defmacro unless (cond &rest body)
  `(if (not ,cond)
       (begin ,@body)))

(defmacro delay (expr)
  (with-macro-vars (cache cache-valid-p)
    `(let ((,cache none) (,cache-valid-p false))
       (lambda ()
         (unless ,cache-valid-p
           (:= ,cache ,expr)
           (:= ,cache-valid-p true))
         ,cache))))

(define (force promise)
  (promise))

(defmacro for (var-and-seq &rest body)
  (with-macro-vars (i e)
    (let ((var ([] var-and-seq 0))
          (seq ([] var-and-seq 1)))
      `(let ((,i (iter ,seq)))
         (while true
           (let ((,var (try (next ,i)
                        (:StopIteration ,e (break)))))
             ,@body))))))

(defmacro if-bind (var-and-cond then else)
  (let ((var ([] var-and-cond 0))
        (cond ([] var-and-cond 1)))
    `(let ((,var ,cond))
       (if ,var
           ,then
           ,else))))

(defmacro when-bind (var-and-cond then)
  (let ((var ([] var-and-cond 0))
        (cond ([] var-and-cond 1)))
    `(let ((,var ,cond))
       (when ,var
             ,then))))

;; The lack of yield* in Python was part of my motivation for writing Adder.
(defmacro yield* (subseq)
  (with-macro-vars (x i stack stop)
    `(let ((,stack (mk-list (iter ,subseq))))
       (while ,stack
         (let ((,i ([] ,stack -1)))
           (while true
             (let ((,x (try (next ,i)
                        (:StopIteration ,stop ((. ,stack pop)) (break)))))
               (if (generator? ,x)
                   (begin
                     ((. ,stack append) ,x)
                     (break))
                   (yield ,x)))))))))

(define (ancestors klass)
  (let ((as (mk-set)))
    (define (add-ancestors k)
      (unless (in k as)
              (as.add k)
              (for (base k.__bases__)
                   (add-ancestors base))))
    (add-ancestors klass)
    as))

(define (descends-from a b)
  (in b (ancestors a)))

(defmacro enum (name-and-maybe-parent &rest values)
  (define (pred-name name)
    (intern (+ (str name) "?")))
  (define (extract-fields paired)
    (while paired
           (let ((field (intern (slice (str ([] paired 0)) 1)))
                 (rhs ([] paired 1)))
             (yield `(define (,field) ,rhs))
             (:= paired (slice paired 2)))))
  (let* ((name (if (symbol? name-and-maybe-parent)
                   name-and-maybe-parent
                   ([] name-and-maybe-parent 0)))
         (name? (pred-name name))
         (parent-list (if (symbol? name-and-maybe-parent)
                          '()
                          `(,([] name-and-maybe-parent 1)))))
    (+ `(begin
          (class ,name ,parent-list)
          (define (,name? e) (descends-from e ,name))
          )
       (mapcar (lambda (v)
                 (let ((v-name (if (symbol? v)
                                   v
                                   ([] v 0)))
                       (v-parents (if (or (symbol? v)
                                          (keyword? ([] v 1)))
                                      `(,name)
                                      `(,name ,([] v 1))))
                       )
                   `(begin (class ,v-name ,v-parents
                           ,@(if (symbol? v)
                                 '()
                                 (list (extract-fields
                                        (slice v
                                               (if (keyword? ([] v 1))
                                                   1
                                                   2))))))
                           (define (,(pred-name v-name) e)
                             (descends-from e ,v-name)))
                   ))
               values)
       )
    )
  )
